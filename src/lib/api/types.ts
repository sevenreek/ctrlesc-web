/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/rooms": {
    /** Index */
    get: operations["index_rooms_get"];
  };
  "/rooms/sse": {
    /** Sse */
    get: operations["sse_rooms_sse_get"];
  };
  "/rooms/{slug}": {
    /** Details */
    get: operations["details_rooms__slug__get"];
  };
  "/rooms/{slug}/config": {
    /** Details */
    get: operations["details_rooms__slug__config_get"];
  };
  "/rooms/{slug}/request": {
    /** Request */
    post: operations["request_rooms__slug__request_post"];
  };
  "/rooms/{slug}/games/{game_id}": {
    /** Game */
    get: operations["game_rooms__slug__games__game_id__get"];
  };
  "/rooms/puzzle/supported": {
    /** Get Supported Puzzles */
    get: operations["get_supported_puzzles_rooms_puzzle_supported_get"];
  };
  "/": {
    /** Index */
    get: operations["index__get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** DigitalStatePuzzle */
    DigitalStatePuzzle: {
      /** Slug */
      slug: string;
      /**
       * Completed
       * @default false
       */
      completed?: boolean;
      /**
       * Type
       * @constant
       */
      type: "DIGITAL_STATE";
      /** State */
      state: {
        [key: string]: boolean;
      };
      /** Name */
      name: string;
      /** Completionworth */
      completionWorth: number;
      /** Completeoverrideenabled */
      completeOverrideEnabled: boolean;
      /** Statemap */
      stateMap: {
        [key: string]: string;
      };
      /** Namemap */
      nameMap?: {
        [key: string]: string;
      } | null;
      /** Initialstate */
      initialState: unknown;
    };
    /** DigitalStatePuzzleConfig */
    DigitalStatePuzzleConfig: {
      /** Slug */
      slug: string;
      /** Name */
      name: string;
      /** Completionworth */
      completionWorth: number;
      /**
       * Type
       * @constant
       */
      type: "DIGITAL_STATE";
      /** Completeoverrideenabled */
      completeOverrideEnabled: boolean;
      /** Statemap */
      stateMap: {
        [key: string]: string;
      };
      /** Namemap */
      nameMap?: {
        [key: string]: string;
      } | null;
      /** Initialstate */
      initialState: unknown;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /**
     * PuzzleType
     * @enum {string}
     */
    PuzzleType: "DIGITAL_STATE" | "SEQUENCE" | "SPEECH_DETECTION";
    /** RequestResult */
    RequestResult: {
      /**
       * Success
       * @default true
       */
      success?: boolean;
      /** Error */
      error?: string | null;
    };
    /** Room */
    Room: {
      /** Slug */
      slug: string;
      /** Activestage */
      activeStage: number | null;
      state: components["schemas"]["TimerState"];
      /** Timeelapsedonpause */
      timeElapsedOnPause: number;
      /** Starttimestamp */
      startTimestamp: string | null;
      /** Extratime */
      extraTime: number;
      /** Stages */
      stages: components["schemas"]["Stage"][];
      /** Activegameid */
      activeGameId: string | null;
      /** Name */
      name: string;
      /** Imageurl */
      imageUrl: string | null;
      /** Basetime */
      baseTime: number;
    };
    /** RoomConfig */
    RoomConfig: {
      /** Slug */
      slug: string;
      /** Name */
      name: string;
      /** Stages */
      stages: components["schemas"]["StageConfig"][];
      /** Imageurl */
      imageUrl: string | null;
      /** Basetime */
      baseTime: number;
    };
    /** SequencePuzzle */
    SequencePuzzle: {
      /** Slug */
      slug: string;
      /**
       * Completed
       * @default false
       */
      completed?: boolean;
      /**
       * Type
       * @constant
       */
      type: "SEQUENCE";
      /** State */
      state: unknown[];
      /** Name */
      name: string;
      /** Completionworth */
      completionWorth: number;
      /** Completeoverrideenabled */
      completeOverrideEnabled: boolean;
      /** Statemap */
      stateMap: {
        [key: string]: string;
      };
      /** Namemap */
      nameMap?: {
        [key: string]: string;
      } | null;
      /** Initialstate */
      initialState: unknown;
      extras: components["schemas"]["SequencePuzzleConfigExtras"];
    };
    /** SequencePuzzleConfig */
    SequencePuzzleConfig: {
      /** Slug */
      slug: string;
      /** Name */
      name: string;
      /** Completionworth */
      completionWorth: number;
      /**
       * Type
       * @constant
       */
      type: "SEQUENCE";
      /** Completeoverrideenabled */
      completeOverrideEnabled: boolean;
      /** Statemap */
      stateMap: {
        [key: string]: string;
      };
      /** Namemap */
      nameMap?: {
        [key: string]: string;
      } | null;
      /** Initialstate */
      initialState: unknown;
      extras: components["schemas"]["SequencePuzzleConfigExtras"];
    };
    /** SequencePuzzleConfigExtras */
    SequencePuzzleConfigExtras: {
      /** Targetstate */
      targetState: unknown[];
    };
    /** SkipPuzzleRequest */
    SkipPuzzleRequest: {
      /**
       * Action
       * @constant
       */
      action: "skip";
      /** Stage */
      stage: string;
      /** Puzzle */
      puzzle: string;
    };
    /** SpeechDetectionAttempt */
    SpeechDetectionAttempt: {
      /** Phrase */
      phrase: string;
      /** Confidence */
      confidence: number;
      /** Matchlevel */
      matchLevel: number;
    };
    /** SpeechDetectionPuzzle */
    SpeechDetectionPuzzle: {
      /** Slug */
      slug: string;
      /**
       * Completed
       * @default false
       */
      completed?: boolean;
      /**
       * Type
       * @constant
       */
      type: "SPEECH_DETECTION";
      state: components["schemas"]["SpeechDetectionPuzzleStateObject"];
      /** Name */
      name: string;
      /** Completionworth */
      completionWorth: number;
      /** Completeoverrideenabled */
      completeOverrideEnabled: boolean;
      /** Statemap */
      stateMap: {
        [key: string]: string;
      };
      /** Namemap */
      nameMap?: {
        [key: string]: string;
      } | null;
      /** Initialstate */
      initialState: unknown;
      extras: components["schemas"]["SpeechDetectionPuzzleConfigExtras"];
    };
    /** SpeechDetectionPuzzleConfig */
    SpeechDetectionPuzzleConfig: {
      /** Slug */
      slug: string;
      /** Name */
      name: string;
      /** Completionworth */
      completionWorth: number;
      /**
       * Type
       * @constant
       */
      type: "SPEECH_DETECTION";
      /** Completeoverrideenabled */
      completeOverrideEnabled: boolean;
      /** Statemap */
      stateMap: {
        [key: string]: string;
      };
      /** Namemap */
      nameMap?: {
        [key: string]: string;
      } | null;
      /** Initialstate */
      initialState: unknown;
      extras: components["schemas"]["SpeechDetectionPuzzleConfigExtras"];
    };
    /** SpeechDetectionPuzzleConfigExtras */
    SpeechDetectionPuzzleConfigExtras: {
      /** Phrases */
      phrases: string[];
    };
    /** SpeechDetectionPuzzleStateObject */
    SpeechDetectionPuzzleStateObject: {
      /** Currentphrase */
      currentPhrase: number;
      /** Lastattempts */
      lastAttempts: components["schemas"]["SpeechDetectionAttempt"][];
    };
    /** Stage */
    Stage: {
      /** Slug */
      slug: string;
      /** Puzzles */
      puzzles: (components["schemas"]["DigitalStatePuzzle"] | components["schemas"]["SequencePuzzle"] | components["schemas"]["SpeechDetectionPuzzle"])[];
      /** Name */
      name: string;
      /** Description */
      description: string | null;
    };
    /** StageConfig */
    StageConfig: {
      /** Slug */
      slug: string;
      /** Puzzles */
      puzzles: (components["schemas"]["DigitalStatePuzzleConfig"] | components["schemas"]["SequencePuzzleConfig"] | components["schemas"]["SpeechDetectionPuzzleConfig"])[];
      /** Name */
      name: string;
      /** Description */
      description: string | null;
    };
    /** TimerAddRequest */
    TimerAddRequest: {
      /**
       * Action
       * @enum {string}
       */
      action: "skip" | "start" | "stop" | "pause" | "add" | "reset";
      /** Minutes */
      minutes: number;
    };
    /**
     * TimerState
     * @enum {string}
     */
    TimerState: "ready" | "active" | "paused" | "finished" | "stopped";
    /** TimerStateRequest */
    TimerStateRequest: {
      /**
       * Action
       * @enum {string}
       */
      action: "skip" | "start" | "stop" | "pause" | "add" | "reset";
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Index */
  index_rooms_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Room"][];
        };
      };
    };
  };
  /** Sse */
  sse_rooms_sse_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Details */
  details_rooms__slug__get: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Room"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Details */
  details_rooms__slug__config_get: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RoomConfig"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Request */
  request_rooms__slug__request_post: {
    parameters: {
      path: {
        slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SkipPuzzleRequest"] | components["schemas"]["TimerAddRequest"] | components["schemas"]["TimerStateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RequestResult"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Game */
  game_rooms__slug__games__game_id__get: {
    parameters: {
      path: {
        slug: string;
        game_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Supported Puzzles */
  get_supported_puzzles_rooms_puzzle_supported_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PuzzleType"][];
        };
      };
    };
  };
  /** Index */
  index__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
}
